'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AwaitLock = function () {
  function AwaitLock() {
    _classCallCheck(this, AwaitLock);

    this._acquired = false;
    this._waitingResolvers = [];
  }

  _createClass(AwaitLock, [{
    key: 'acquireAsync',
    value: function acquireAsync() {
      var _this = this;

      if (!this._acquired) {
        this._acquired = true;
        return Promise.resolve();
      }

      return new Promise(function (resolve) {
        _this._waitingResolvers.push(resolve);
      });
    }
  }, {
    key: 'release',
    value: function release() {
      (0, _assert2.default)(this._acquired, 'Trying to release an unacquired lock');
      if (this._waitingResolvers.length > 0) {
        var resolve = this._waitingResolvers.shift();
        resolve();
      } else {
        this._acquired = false;
      }
    }
  }]);

  return AwaitLock;
}();

exports.default = AwaitLock;
module.exports = exports['default'];